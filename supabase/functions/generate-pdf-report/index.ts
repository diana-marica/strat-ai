import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface PDFRequest {
  auditId: string;
  reportContent: string;
  title?: string;
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // Initialize Supabase client
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        auth: {
          autoRefreshToken: false,
          persistSession: false,
        },
      }
    );

    const { auditId, reportContent, title = 'AI Audit Report' }: PDFRequest = await req.json();

    console.log(`Generating PDF for audit: ${auditId}`);

    // Convert markdown to HTML
    const htmlContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="UTF-8">
          <title>${title}</title>
          <style>
            body {
              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
              line-height: 1.6;
              color: #333;
              max-width: 800px;
              margin: 0 auto;
              padding: 40px 20px;
            }
            h1, h2, h3, h4, h5, h6 {
              color: #2563eb;
              margin-top: 2em;
              margin-bottom: 1em;
            }
            h1 { font-size: 2.5em; border-bottom: 3px solid #2563eb; padding-bottom: 0.5em; }
            h2 { font-size: 2em; border-bottom: 1px solid #e5e7eb; padding-bottom: 0.3em; }
            h3 { font-size: 1.5em; }
            p { margin-bottom: 1em; }
            ul, ol { margin-bottom: 1em; padding-left: 2em; }
            li { margin-bottom: 0.5em; }
            blockquote {
              border-left: 4px solid #2563eb;
              margin: 1em 0;
              padding: 0.5em 1em;
              background: #f8fafc;
            }
            code {
              background: #f1f5f9;
              padding: 0.2em 0.4em;
              border-radius: 3px;
              font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace;
            }
            pre {
              background: #f1f5f9;
              padding: 1em;
              border-radius: 6px;
              overflow-x: auto;
            }
            table {
              width: 100%;
              border-collapse: collapse;
              margin: 1em 0;
            }
            th, td {
              border: 1px solid #e5e7eb;
              padding: 0.75em;
              text-align: left;
            }
            th { background: #f8fafc; font-weight: 600; }
            .header {
              text-align: center;
              margin-bottom: 3em;
              border-bottom: 2px solid #2563eb;
              padding-bottom: 2em;
            }
            .footer {
              margin-top: 3em;
              padding-top: 2em;
              border-top: 1px solid #e5e7eb;
              text-align: center;
              font-size: 0.9em;
              color: #6b7280;
            }
            @media print {
              body { font-size: 12pt; }
              h1 { page-break-before: always; }
              h1:first-child { page-break-before: avoid; }
            }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>${title}</h1>
            <p>Generated on ${new Date().toLocaleDateString('en-US', { 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric' 
            })}</p>
          </div>
          ${markdownToHtml(reportContent)}
          <div class="footer">
            <p>This report was generated by StratAI - Your AI Readiness Partner</p>
          </div>
        </body>
      </html>
    `;

    // Use Puppeteer to generate PDF
    const pdfResponse = await fetch('https://api.htmlcsstoimage.com/v1/image', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${Deno.env.get('HTML_CSS_TO_IMAGE_API_KEY')}`,
      },
      body: JSON.stringify({
        html: htmlContent,
        format: 'pdf',
        width: 1200,
        height: 800,
        device_scale_factor: 2,
      }),
    });

    if (!pdfResponse.ok) {
      throw new Error(`PDF generation failed: ${pdfResponse.statusText}`);
    }

    const pdfBuffer = await pdfResponse.arrayBuffer();

    // Upload PDF to Supabase Storage
    const fileName = `audit-report-${auditId}-${Date.now()}.pdf`;
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('audit-reports')
      .upload(fileName, pdfBuffer, {
        contentType: 'application/pdf',
      });

    if (uploadError) throw uploadError;

    // Get public URL
    const { data: urlData } = supabase.storage
      .from('audit-reports')
      .getPublicUrl(fileName);

    // Update audit record with PDF URL
    const { error: updateError } = await supabase
      .from('audits')
      .update({ 
        report_url: urlData.publicUrl,
        status: 'completed'
      })
      .eq('id', auditId);

    if (updateError) throw updateError;

    console.log(`PDF generated and stored for audit: ${auditId}`);

    return new Response(
      JSON.stringify({ 
        success: true, 
        pdfUrl: urlData.publicUrl,
        fileName,
        auditId 
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );

  } catch (error: any) {
    console.error('Error generating PDF:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});

function markdownToHtml(markdown: string): string {
  return markdown
    // Headers
    .replace(/^### (.*$)/gim, '<h3>$1</h3>')
    .replace(/^## (.*$)/gim, '<h2>$1</h2>')
    .replace(/^# (.*$)/gim, '<h1>$1</h1>')
    // Bold
    .replace(/\*\*(.*)\*\*/gim, '<strong>$1</strong>')
    // Italic
    .replace(/\*(.*)\*/gim, '<em>$1</em>')
    // Code blocks
    .replace(/```([\s\S]*?)```/gim, '<pre><code>$1</code></pre>')
    // Inline code
    .replace(/`([^`]*)`/gim, '<code>$1</code>')
    // Lists
    .replace(/^\* (.*)$/gim, '<li>$1</li>')
    .replace(/(<li>.*<\/li>)/gims, '<ul>$1</ul>')
    // Blockquotes
    .replace(/^> (.*)$/gim, '<blockquote>$1</blockquote>')
    // Line breaks
    .replace(/\n\n/gim, '</p><p>')
    .replace(/^(.*)$/gim, '<p>$1</p>')
    // Clean up empty paragraphs
    .replace(/<p><\/p>/gim, '')
    // Fix nested lists
    .replace(/<\/ul>\s*<ul>/gim, '')
    .replace(/<p><li>/gim, '<li>')
    .replace(/<\/li><\/p>/gim, '</li>');
}