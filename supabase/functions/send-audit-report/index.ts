import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';
import { Resend } from "npm:resend@4.0.0";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface EmailRequest {
  auditId: string;
  reportContent: string;
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // Initialize Supabase client
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        global: {
          headers: { Authorization: req.headers.get('Authorization')! },
        },
      }
    );

    // Get current user
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      throw new Error('User not authenticated');
    }

    const { auditId, reportContent }: EmailRequest = await req.json();

    console.log(`Sending audit report via email for audit: ${auditId} to user: ${user.email}`);

    // Initialize Resend
    const resend = new Resend(Deno.env.get('RESEND_API_KEY'));

    // Convert markdown to HTML for email
    const htmlContent = reportContent
      .replace(/^### (.*$)/gim, '<h3 style="color: #2563eb; margin-top: 1.5em; margin-bottom: 0.75em;">$1</h3>')
      .replace(/^## (.*$)/gim, '<h2 style="color: #2563eb; margin-top: 2em; margin-bottom: 1em; border-bottom: 1px solid #e5e7eb; padding-bottom: 0.5em;">$1</h2>')
      .replace(/^# (.*$)/gim, '<h1 style="color: #2563eb; margin-top: 0; margin-bottom: 1em;">$1</h1>')
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/^\* (.*)$/gm, '<li>$1</li>')
      .replace(/(<li>.*<\/li>)/gs, '<ul style="margin: 1em 0; padding-left: 2em;">$1</ul>')
      .replace(/\n\n/g, '</p><p style="margin-bottom: 1em;">')
      .replace(/^(.*)$/gm, '<p style="margin-bottom: 1em;">$1</p>')
      .replace(/<p[^>]*><\/p>/g, '')
      .replace(/<p[^>]*><h([1-6])[^>]*>/g, '<h$1')
      .replace(/<\/h([1-6])><\/p>/g, '</h$1>')
      .replace(/<p[^>]*><ul/g, '<ul')
      .replace(/<\/ul><\/p>/g, '</ul>')
      .replace(/<\/ul>\s*<ul[^>]*>/g, '');

    const emailHtml = `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Your AI Audit Report</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      line-height: 1.6;
      color: #333;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
    }
    .header {
      text-align: center;
      margin-bottom: 2em;
      padding: 2em;
      background: linear-gradient(135deg, #2563eb, #3b82f6);
      color: white;
      border-radius: 8px;
    }
    .header h1 {
      margin: 0;
      color: white !important;
    }
    .footer {
      margin-top: 3em;
      padding-top: 2em;
      border-top: 1px solid #e5e7eb;
      text-align: center;
      font-size: 0.9em;
      color: #6b7280;
    }
  </style>
</head>
<body>
  <div class="header">
    <h1>Your AI Audit Report</h1>
    <p>Generated on ${new Date().toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    })}</p>
  </div>
  
  ${htmlContent}
  
  <div class="footer">
    <p>This report was generated by StratAI - Your AI Readiness Partner</p>
    <p>Need help with your AI implementation? <a href="mailto:support@stratai.com" style="color: #2563eb;">Contact our experts</a></p>
  </div>
</body>
</html>
    `;

    // Send email
    const { data, error } = await resend.emails.send({
      from: 'StratAI <reports@stratai.com>',
      to: [user.email!],
      subject: `Your AI Audit Report - ${new Date().toLocaleDateString()}`,
      html: emailHtml,
    });

    if (error) {
      console.error('Resend error:', error);
      throw error;
    }

    console.log('Email sent successfully:', data);

    return new Response(
      JSON.stringify({ 
        success: true,
        emailId: data?.id
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );

  } catch (error: any) {
    console.error('Error in send-audit-report function:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});