import { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { supabase } from '@/integrations/supabase/client';
import { Button } from '@/components/ui/button';
import { ArrowLeft, Download } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface Audit {
  id: string;
  title: string;
  report_content: string;
  created_at: string;
  status: string;
}

export default function AuditReport() {
  const { auditId } = useParams<{ auditId: string }>();
  const navigate = useNavigate();
  const { toast } = useToast();
  const [audit, setAudit] = useState<Audit | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (auditId) {
      loadAudit();
    }
  }, [auditId]);

  const loadAudit = async () => {
    try {
      const { data, error } = await supabase
        .from('audits')
        .select('*')
        .eq('id', auditId)
        .single();

      if (error) throw error;
      setAudit(data);
    } catch (error) {
      console.error('Error loading audit:', error);
      toast({
        title: "Error",
        description: "Failed to load audit report.",
        variant: "destructive",
      });
      navigate('/dashboard');
    } finally {
      setLoading(false);
    }
  };

  const handlePrint = async () => {
    // Wait for fonts to load before printing
    await document.fonts.ready;
    window.print();
  };

  const parseMarkdown = (markdown: string): string => {
    return markdown
      // Headers
      .replace(/^### (.*$)/gim, '<h3>$1</h3>')
      .replace(/^## (.*$)/gim, '<h2>$1</h2>')
      .replace(/^# (.*$)/gim, '<h1>$1</h1>')
      // Bold
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      // Italic
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      // Lists
      .replace(/^\* (.*)$/gm, '<li>$1</li>')
      .replace(/(<li>.*<\/li>)/gs, '<ul>$1</ul>')
      // Line breaks - convert double newlines to paragraph breaks
      .replace(/\n\n/g, '</p><p>')
      .replace(/^(.*)$/gm, '<p>$1</p>')
      // Clean up
      .replace(/<p><\/p>/g, '')
      .replace(/<p><h([1-6])>/g, '<h$1>')
      .replace(/<\/h([1-6])><\/p>/g, '</h$1>')
      .replace(/<p><ul>/g, '<ul>')
      .replace(/<\/ul><\/p>/g, '</ul>')
      .replace(/<p><li>/g, '<li>')
      .replace(/<\/li><\/p>/g, '</li>')
      .replace(/<\/ul>\s*<ul>/g, '');
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-primary mb-4 mx-auto"></div>
          <p className="text-muted-foreground">Loading report...</p>
        </div>
      </div>
    );
  }

  if (!audit) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <p className="text-muted-foreground mb-4">Report not found</p>
          <Button onClick={() => navigate('/dashboard')}>
            Return to Dashboard
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background">
      {/* No-print controls */}
      <div className="no-print sticky top-0 z-50 bg-background border-b px-4 py-3">
        <div className="max-w-4xl mx-auto flex items-center justify-between">
          <Button
            variant="outline"
            onClick={() => navigate('/dashboard')}
            className="flex items-center gap-2"
          >
            <ArrowLeft className="w-4 h-4" />
            Back to Dashboard
          </Button>
          
          <Button onClick={handlePrint} className="flex items-center gap-2">
            <Download className="w-4 h-4" />
            Download PDF
          </Button>
        </div>
      </div>

      {/* Report Content */}
      <div className="report-container max-w-4xl mx-auto p-8">
        {/* Report Header */}
        <div className="report-header mb-8 text-center border-b pb-6">
          <h1 className="text-3xl font-bold text-primary mb-2">{audit.title}</h1>
          <p className="text-muted-foreground">
            Generated on {new Date(audit.created_at).toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            })}
          </p>
        </div>

        {/* Report Body */}
        <div 
          className="report-content prose prose-lg max-w-none"
          dangerouslySetInnerHTML={{ 
            __html: parseMarkdown(audit.report_content || '') 
          }}
        />

        {/* Report Footer */}
        <div className="report-footer mt-12 pt-6 border-t text-center text-sm text-muted-foreground">
          <p>This report was generated by StratAI - Your AI Readiness Partner</p>
          <p className="mt-1">Â© {new Date().getFullYear()} StratAI. All rights reserved.</p>
        </div>
      </div>
    </div>
  );
}